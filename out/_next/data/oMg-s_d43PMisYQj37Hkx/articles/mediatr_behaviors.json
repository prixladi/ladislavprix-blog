{"pageProps":{"article":{"title":"MediatR behaviors","metaDescription":"MediatR is a popular .NET library for in-process messaging.","keywordText":"mediatr jimmy bogart mediator .net c# tech","ogImageExtension":"png","brief":{"compiledSource":"var c=Object.defineProperty,g=Object.defineProperties;var h=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var n=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var m=(e,t,a)=>t in e?c(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,p=(e,t)=>{for(var a in t||(t={}))n.call(t,a)&&m(e,a,t[a]);if(r)for(var a of r(t))s.call(t,a)&&m(e,a,t[a]);return e},i=(e,t)=>g(e,h(t));var u=(e,t)=>{var a={};for(var o in e)n.call(e,o)&&t.indexOf(o)<0&&(a[o]=e[o]);if(e!=null&&r)for(var o of r(e))t.indexOf(o)<0&&s.call(e,o)&&(a[o]=e[o]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var o=a,{components:e}=o,t=u(o,[\"components\"]);return mdx(MDXLayout,i(p(p({},layoutProps),t),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"a\",p({parentName:\"p\"},{href:\"https://github.com/jbogard/MediatR\"}),\"MediatR\"),\" is a popular \",mdx(\"strong\",{parentName:\"p\"},\".NET\"),\" library for \",mdx(\"em\",{parentName:\"p\"},\"in-process messaging\"),\". It offers various tools to alter the \",mdx(\"em\",{parentName:\"p\"},\"behavior\"),\" of \",mdx(\"em\",{parentName:\"p\"},\"requests\"),\" with shared logic.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"createdAt":"2021-09-10","author":"Ladislav Prix","readingTimeInMinutes":5,"content":{"compiledSource":"var m=Object.defineProperty,h=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var r=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable;var p=(e,a,t)=>a in e?m(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,o=(e,a)=>{for(var t in a||(a={}))i.call(a,t)&&p(e,t,a[t]);if(r)for(var t of r(a))s.call(a,t)&&p(e,t,a[t]);return e},c=(e,a)=>h(e,d(a));var l=(e,a)=>{var t={};for(var n in e)i.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(e!=null&&r)for(var n of r(e))a.indexOf(n)<0&&s.call(e,n)&&(t[n]=e[n]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var n=t,{components:e}=n,a=l(n,[\"components\"]);return mdx(MDXLayout,c(o(o({},layoutProps),a),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,mdx(\"a\",o({parentName:\"p\"},{href:\"https://github.com/jbogard/MediatR\"}),\"MediatR\"),\" is \",mdx(\"strong\",{parentName:\"p\"},\".NET\"),\" library for in-process messaging created by \",mdx(\"a\",o({parentName:\"p\"},{href:\"https://jimmybogard.com/\"}),\"Jimmy Bogard\"),\", who is also the author of other popular libraries, such as \",mdx(\"a\",o({parentName:\"p\"},{href:\"https://github.com/AutoMapper/AutoMapper\"}),\"AutoMapper\"),\". \"),mdx(\"p\",null,\"The goal of this article is not to explain what \",mdx(\"strong\",{parentName:\"p\"},\"MediatR\"),\" is and how it works, it is best described by Jimmy in \",mdx(\"a\",o({parentName:\"p\"},{href:\"https://www.youtube.com/watch?v=SUiWfhAhgQw&t\"}),\"this youtube video\"),\". So following from now on it is assumed that the reader of this article already knows the basics about \",mdx(\"strong\",{parentName:\"p\"},\"MediatR\"),\". The main goal of this article is to show \",mdx(\"em\",{parentName:\"p\"},\"pipeline behavior\"),\" functionality and how to use it in your project.\"),mdx(\"h2\",null,\"Behaviors\"),mdx(\"p\",null,\"Pipeline behaviors are tools to alter the behavior of the \",mdx(\"em\",{parentName:\"p\"},\"request\"),\" before it hits its \",mdx(\"em\",{parentName:\"p\"},\"handler\"),\". They function on the classical pipeline principle, meaning you can do some action before then send a request to the next pipeline, and after it returns do something after. Below you can see a generic example of this principle.\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-csharp\"}),`public class MyBehavior<TRequest, TResponse> \n    : IPipelineBehavior<TRequest, TResponse>\n    where TRequest : notnull\n{\n    public async Task<TResponse> Handle(\n        TRequest request, \n        CancellationToken cancellationToken, \n        RequestHandlerDelegate<TResponse> next)\n    {\n        await DoBefore(cancellationToken);\n        var response = await next();\n        await DoAfter(cancellationToken);\n        \n        return response;\n    }\n}\n`)),mdx(\"p\",null,\"You can restrict which \",mdx(\"em\",{parentName:\"p\"},\"requests\"),\" the behavior will be applied to. For example, in the segment below this behavior will be applied only to requests that implement the \",mdx(\"inlineCode\",{parentName:\"p\"},\"IInTransaction\"),\" interface. So this \",mdx(\"em\",{parentName:\"p\"},\"behavior\"),\" opens transaction for every request that implements the \",mdx(\"inlineCode\",{parentName:\"p\"},\"IInTransaction\"),\" interface and then, depending on if an \",mdx(\"strong\",{parentName:\"p\"},\"exception\"),\" has been thrown or not, commits or rolls back said transaction. \"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-csharp\"}),`public class TransactionBehavior<TRequest, TResponse> \n    : IPipelineBehavior<TRequest, TResponse>\n    where TRequest : IInTransaction\n{\n    private readonly DatabaseContext context;\n\n    public TransactionBehavior(DatabaseContext context)\n    {\n        this.context = context;\n    }\n\n    public async Task<TResponse> Handle(\n        TRequest request, \n        CancellationToken cancellationToken, \n        RequestHandlerDelegate<TResponse> next)\n    {\n        var transaction = await context.Database.BeginTransactionAsync(cancellationToken);\n        try\n        {\n            var response = await next();\n            await transaction.CommitAsync(cancellationToken);\n            return response;\n        }\n        catch\n        {\n            await transaction.RollbackAsync(cancellationToken);\n            throw;\n        }\n        \n        return response;\n    }\n}\n`)),mdx(\"p\",null,\"Behaviors can be added to the \",mdx(\"em\",{parentName:\"p\"},\"dependency injection container\"),\" (\",mdx(\"em\",{parentName:\"p\"},\"DI\"),\") by simply registering them as open generic scoped services.\"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-csharp\"}),`services.AddTransient(typeof(IPipelineBehavior<,>), typeof(TransactionBehavior<,>));\n`)),mdx(\"h2\",null,\"RequestProcessors\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"MediatR\"),\" package comes with some predefined behaviors - \",mdx(\"inlineCode\",{parentName:\"p\"},\"RequestPreProcessorBehavior\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"RequestPostProcessorBehavior\"),\". Those are behaviors that cover actions before respectively after the \",mdx(\"em\",{parentName:\"p\"},\"request\"),\" is handled. Those \",mdx(\"em\",{parentName:\"p\"},\"behaviors\"),\" are registered automatically with \",mdx(\"strong\",{parentName:\"p\"},\"MeditR\"),\" to \",mdx(\"em\",{parentName:\"p\"},\"DI\"),\" and by default don't do anything because don't have any actions registered. \"),mdx(\"p\",null,\"You can register this \",mdx(\"em\",{parentName:\"p\"},\"pre / post\"),\" processor action by implementing \",mdx(\"inlineCode\",{parentName:\"p\"},\"IRequestPreProcessor<TRequest>\"),\" / \",mdx(\"inlineCode\",{parentName:\"p\"},\"IRequestPostProcessor<TRequest>\"),\" interface. These actions will get automatically registered into \",mdx(\"em\",{parentName:\"p\"},\"DI\"),\" too. Below we can see an example of the \",mdx(\"inlineCode\",{parentName:\"p\"},\"IRequestPreProcessor\"),\" that receives an array of validators of concrete \",mdx(\"em\",{parentName:\"p\"},\"request\"),\" implementing an \",mdx(\"inlineCode\",{parentName:\"p\"},\"IValidable\"),\" interface a performs validation for each validator. \"),mdx(\"pre\",null,mdx(\"code\",o({parentName:\"pre\"},{className:\"language-csharp\"}),`public class RequestValidationPreprocessor<TRequest> \n    : IRequestPreProcessor<TRequest>\n    where TRequest : IValidable\n{\n    private readonly IEnumerable<IValidator<TRequest>> validators;\n\n    public RequestValidationPreprocessor(IEnumerable<IValidator<TRequest>> validators)\n    {\n        this.validators = validators;\n    }\n\n    public async Task Process(TRequest request, CancellationToken cancellationToken)\n    {\n        foreach(var validator in validators)\n            await validator.ValidateAsync(request);\n    }\n}\n`)),mdx(\"h2\",null,\"Conclusion\"),mdx(\"p\",null,mdx(\"strong\",{parentName:\"p\"},\"MediatR\"),\" is a widely used library and \",mdx(\"em\",{parentName:\"p\"},\"behaviors\"),\" are convenient tools to be used for with its basic functionality. I encourage you to read more about \",mdx(\"strong\",{parentName:\"p\"},\"MediatR\"),\" and try to use it in your projects too \\u{1F609}.\"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"id":"mediatr_behaviors"},"settings":{"title":"Ladislav Prix | blog","footer":{"compiledSource":"var y=Object.defineProperty,l=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var p=Object.getOwnPropertySymbols;var e=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var c=(t,o,a)=>o in t?y(t,o,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[o]=a,r=(t,o)=>{for(var a in o||(o={}))e.call(o,a)&&c(t,a,o[a]);if(p)for(var a of p(o))i.call(o,a)&&c(t,a,o[a]);return t},s=(t,o)=>l(t,m(o));var u=(t,o)=>{var a={};for(var n in t)e.call(t,n)&&o.indexOf(n)<0&&(a[n]=t[n]);if(t!=null&&p)for(var n of p(t))o.indexOf(n)<0&&i.call(t,n)&&(a[n]=t[n]);return a};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(a){var n=a,{components:t}=n,o=u(n,[\"components\"]);return mdx(MDXLayout,s(r(r({},layoutProps),o),{components:t,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Copyright 2021 \\xA9 \",mdx(\"a\",r({parentName:\"p\"},{href:\"mailto:contact@ladislavprix.cz\"}),\"Ladislav Prix\")))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"seoProps":{"title":"MediatR behaviors","metaDescription":"MediatR is a popular .NET library for in-process messaging.","metaKeywords":"mediatr jimmy bogart mediator .net c# tech","ogTitle":"MediatR behaviors","ogDescription":"MediatR is a popular .NET library for in-process messaging.","ogImage":"https:/blog.ladislavprix.cz/assets/pages/mediatr_behaviors.png","ogUrl":"https:/blog.ladislavprix.cz/articles/mediatr_behaviors","ogSiteName":"Ladislav Prix | blog"}},"__N_SSG":true}